apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'jacoco'  //coverage for normal unit tests

//To run all tests with coverage, use "gradle createDebugCoverageReport jacocoTestReport"

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

android {
    compileSdkVersion compile_sdk
    buildToolsVersion build_tools
    defaultPublishConfig "release"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion target_sdk
        versionCode version_code
        versionName version
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        debug {
            testCoverageEnabled true    //coverage for instrumentation tests
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    adbOptions {
        timeOutInMs 60000 // set timeout to 1 minute
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    testCompile 'org.jetbrains.kotlin:kotlin-test:1.0.3'

    compile "com.android.support:support-annotations:$support_library"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.jakewharton.timber:timber:4.3.0'
    compile 'io.reactivex:rxjava:1.1.6'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'com.github.daemontus:kotlin-option-result:1.0.0'

    androidTestCompile 'org.jetbrains.kotlin:kotlin-test:1.0.3'
    androidTestCompile 'com.android.support.test:runner:0.4'
    // Set this dependency to use JUnit 4 rules
    androidTestCompile 'com.android.support.test:rules:0.4'
    // Set this dependency to build and run Espresso tests
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
}



task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}


task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    jacocoClasspath = configurations['androidJacocoAnt']

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    def instrumentationCoverage = fileTree(dir: "${buildDir}/outputs/code-coverage/connected", include: "*.ec")
    executionData = files(["${buildDir}/jacoco/testDebugUnitTest.exec", instrumentationCoverage])
}

//workaround for https://youtrack.jetbrains.com/issue/KT-11333
preBuild.doFirst {
    //At this point, this task is actually created
    transformClassesWithJacocoForDebug.doLast {
        copy {
            from "${buildDir}/intermediates/classes/debug/META-INF"
            into "${buildDir}/intermediates/transforms/jacoco/debug/folders/1/1/main/META-INF"
        }
    }
}